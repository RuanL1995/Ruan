/*
Deployment script for TGDBProj

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TGDBProj"
:setvar DefaultFilePrefix "TGDBProj"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[tblProject]...';


GO
CREATE TABLE [dbo].[tblProject] (
    [ProjectId]        INT           IDENTITY (1, 1) NOT NULL,
    [ProjectName]      VARCHAR (50)  NOT NULL,
    [ProjectPhase]     VARCHAR (50)  NOT NULL,
    [ProjectStatus]    VARCHAR (50)  NULL,
    [DocumentLocation] VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([ProjectId] ASC)
);


GO
PRINT N'Creating [dbo].[tblAdmin]...';


GO
CREATE TABLE [dbo].[tblAdmin] (
    [AdminId]        INT          IDENTITY (1, 1) NOT NULL,
    [AdminName]      VARCHAR (50) NOT NULL,
    [AdminPassword]  VARCHAR (50) NOT NULL,
    [AdminFirstName] VARCHAR (50) NOT NULL,
    [AdminSurName]   VARCHAR (50) NOT NULL,
    [AdminEmail]     VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([AdminId] ASC)
);


GO
PRINT N'Creating [dbo].[tblTask]...';


GO
CREATE TABLE [dbo].[tblTask] (
    [TaskId]          INT          IDENTITY (1, 1) NOT NULL,
    [TaskName]        VARCHAR (50) NOT NULL,
    [TaskDescription] VARCHAR (50) NOT NULL,
    [TaskProgress]    VARCHAR (50) NOT NULL,
    [TaskAssignedTo]  VARCHAR (50) NOT NULL,
    [ProjectName]     VARCHAR (50) NOT NULL,
    [UserId]          INT          NOT NULL,
    [ProjectId]       INT          NOT NULL,
    [TaskStatus]      VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([TaskId] ASC)
);


GO
PRINT N'Creating [dbo].[tblUser]...';


GO
CREATE TABLE [dbo].[tblUser] (
    [UserId]       INT          IDENTITY (1, 1) NOT NULL,
    [UserName]     VARCHAR (50) NOT NULL,
    [UserPassword] VARCHAR (50) NOT NULL,
    [FirstName]    VARCHAR (50) NOT NULL,
    [SurName]      VARCHAR (50) NOT NULL,
    [Email]        VARCHAR (50) NOT NULL,
    [Initiation]   BIT          NULL,
    [Planning]     BIT          NULL,
    [Execution]    BIT          NULL,
    [CloseOut]     BIT          NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[tblUser]...';


GO
ALTER TABLE [dbo].[tblUser]
    ADD DEFAULT 0 FOR [Initiation];


GO
PRINT N'Creating unnamed constraint on [dbo].[tblUser]...';


GO
ALTER TABLE [dbo].[tblUser]
    ADD DEFAULT 0 FOR [Planning];


GO
PRINT N'Creating unnamed constraint on [dbo].[tblUser]...';


GO
ALTER TABLE [dbo].[tblUser]
    ADD DEFAULT 0 FOR [Execution];


GO
PRINT N'Creating unnamed constraint on [dbo].[tblUser]...';


GO
ALTER TABLE [dbo].[tblUser]
    ADD DEFAULT 0 FOR [CloseOut];


GO
PRINT N'Creating [dbo].[FK_tblTask_tblProject]...';


GO
ALTER TABLE [dbo].[tblTask]
    ADD CONSTRAINT [FK_tblTask_tblProject] FOREIGN KEY ([ProjectId]) REFERENCES [dbo].[tblProject] ([ProjectId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[FK_tblTask_tblUser]...';


GO
ALTER TABLE [dbo].[tblTask]
    ADD CONSTRAINT [FK_tblTask_tblUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[tblUser] ([UserId]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating [dbo].[spTaskC1]...';


GO
CREATE PROCEDURE [dbo].[spTaskC1]
/*
** Purpose : Adds a new task to the task table
** Created By :	Ruan
** Created On :	22 Nov 2020
*/
@TaskName VARCHAR(50),
@TaskDescription VARCHAR(50), 
@TaskProgress VARCHAR(50), 
@TaskAssignedTo VARCHAR(50), 
@ProjectName VARCHAR(50), 
@UserId INT, 
@ProjectId INT, 
@TaskStatus VARCHAR(50)

AS
BEGIN
	INSERT INTO dbo.tblTask
	(
	    TaskName,
		TaskDescription,
		TaskProgress,
		TaskAssignedTo,
		ProjectName,
		UserId,
		ProjectId,
		TaskStatus
	)
	VALUES
	(   
		@TaskName,
		@TaskDescription,
		@TaskProgress,
		@TaskAssignedTo,
		@ProjectName,
		@UserId,
		@ProjectId,
		@TaskStatus
	)
END
GO
PRINT N'Creating [dbo].[spTaskR1]...';


GO
CREATE PROCEDURE [dbo].[spTaskR1]
/*
** Purpose : Gets a list of all tasks and info
** Created By :	Rockz
** Created On :	22 Nov 2020
*/
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT
		T.TaskId,
		T.TaskName,
		T.TaskDescription,
		T.TaskProgress,
		T.TaskAssignedTo,
		T.ProjectName,
		T.UserId,
		T.ProjectId,
		T.TaskStatus
	FROM 
		tblTask T
END
GO
PRINT N'Creating [dbo].[spDeleteTaskRecord]...';


GO
CREATE PROCEDURE [dbo].[spDeleteTaskRecord]
/*
** Purpose :	Delete an existing record in the phase table
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@TaskId int

AS
BEGIN

DELETE 
	FROM
		tblTask		
	WHERE 
		TaskId = @TaskId 
END
GO
PRINT N'Creating [dbo].[spUpdateTaskRecord]...';


GO
CREATE PROCEDURE [dbo].[spUpdateTaskRecord]
/*
** Purpose :	Updates an existing record in the phase table
** Created By :	Rockz
** Created On :	22 Nov 2020
*/

	@TaskId int,
	@TaskName VARCHAR(50),
	@TaskProgress VARCHAR(50),
	@TaskAssignedTo VARCHAR(50)
AS
BEGIN

UPDATE tblTask
	SET
		TaskName = @TaskName,
		TaskProgress = @TaskProgress,
		TaskAssignedTo = @TaskAssignedTo
	WHERE 
		TaskId = @TaskId
END
GO
PRINT N'Creating [dbo].[spDeleteUserRecord]...';


GO
CREATE PROCEDURE [dbo].[spDeleteUserRecord]
/*
** Purpose :	Delete an existing record in the user table
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@UserId int

AS
BEGIN

DELETE 
	FROM
		tblUser		
	WHERE 
		UserId = @UserId
END
GO
PRINT N'Creating [dbo].[spDeletePhaseRecord]...';


GO
CREATE PROCEDURE [dbo].[spDeletePhaseRecord]
/*
** Purpose :	Delete an existing record in the phase table
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@PhaseId int

AS
BEGIN

DELETE 
	FROM
		tblPhase		
	WHERE 
		PhaseId = @PhaseId 
END
GO
PRINT N'Creating [dbo].[spDeleteProjectRecord]...';


GO
CREATE PROCEDURE [dbo].[spDeleteProjectRecord]
/*
** Purpose :	Delete an existing record in the project table
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@ProjectId int
AS
BEGIN

DELETE 
	FROM
		tblProject		
	WHERE 
		ProjectId = @ProjectId
END
GO
PRINT N'Creating [dbo].[spUpdateProjectRecord]...';


GO
CREATE PROCEDURE [dbo].[spUpdateProjectRecord]
/*
** Purpose :	Updates an existing record in the project table
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@ProjectId int,
	@ProjectName VARCHAR(50),
	@ProjectPhase VARCHAR(50),
	@ProjectStatus VARCHAR(50)

AS
BEGIN

UPDATE tblProject
	SET
		ProjectName = @ProjectName,
		ProjectPhase = @ProjectPhase,
		ProjectStatus = @ProjectStatus
	WHERE 
		ProjectId = @ProjectId
END
GO
PRINT N'Creating [dbo].[spUpdatePhaseRecord]...';


GO
CREATE PROCEDURE [dbo].[spUpdatePhaseRecord]
/*
** Purpose :	Updates an existing record in the phase table
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@PhaseId int,
	@PhaseName VARCHAR(50)

AS
BEGIN

UPDATE tblPhase
	SET
		PhaseName = @PhaseName
	WHERE 
		PhaseId = @PhaseId
END
GO
PRINT N'Creating [dbo].[spUpdate]...';


GO
CREATE PROCEDURE [dbo].[spUpdate]
/*
** Purpose :	Updates an existing record in the user table
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@UserId int,
	@UserName VARCHAR(50),
	@UserPassword VARCHAR(50),
	@FirstName VARCHAR(50),
	@SurName VARCHAR(50),
	@Email VARCHAR(50)

AS
BEGIN

UPDATE tblUser
	SET
		UserName = @UserName,
		UserPassword = @UserPassword,
		FirstName = @FirstName,
		SurName = @SurName,
		Email = @Email
	WHERE 
		UserId = @UserId
END
GO
PRINT N'Creating [dbo].[spUserR1]...';


GO
CREATE PROCEDURE [dbo].[spUserR1]
/*
** Purpose : Gets a list of all Users and info
** Created By :	Ruan
** Created On :	10 Oct 2020
*/
@UserName VARCHAR(50)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT 
		U.UserId,
		U.UserName,
		U.UserPassword,	
		U.FirstName,
		U.SurName,
		U.Email,
		U.Initiation,
		U.Planning,
		U.Execution,
		U.CloseOut
	FROM 
		tblUser U  
	WHERE U.UserName = @UserName			
END
GO
PRINT N'Creating [dbo].[spUserProjectR1]...';


GO
CREATE PROCEDURE [dbo].[spUserProjectR1]
/*
** Purpose : Gets a list of all UserProjects and info
** Created By :	Ruan
** Created On :	15 Oct 2020
*/
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT 
		UP.UserId,
		UP.ProjectId
	FROM 
		tblUserProject UP  		
END
GO
PRINT N'Creating [dbo].[spUserC1]...';


GO
CREATE PROCEDURE [dbo].[spUserC1]
/*
** Purpose : Adds a new user to the user table
** Created By :	Ruan
** Created On :	7 Oct 2020
*/
@UserName VARCHAR(50),
@UserPassword VARCHAR(50),
@FirstName VARCHAR(50),
@SurName VARCHAR(50),
@Email VARCHAR(50)

AS
BEGIN
	INSERT INTO dbo.tblUser
	(
	    UserName,
	    UserPassword,
	    FirstName,
	    SurName,
	    Email
	)
	VALUES
	(   
		@UserName,
	    @UserPassword, 
	    @FirstName, 
	    @SurName, 
	    @Email   
	)
END
GO
PRINT N'Creating [dbo].[spProjectR1]...';


GO
CREATE PROCEDURE [dbo].[spProjectR1]
/*
** Purpose : Gets a list of all Projects and info
** Created By :	Ruan
** Created On :	18 Oct 2020
*/
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT 
		P.ProjectId,
		P.ProjectName,
		P.ProjectPhase,
		P.ProjectStatus
	FROM 
		tblProject P 		
END
GO
PRINT N'Creating [dbo].[spProjectPhaseR1]...';


GO
CREATE PROCEDURE [dbo].[spProjectPhaseR1]
/*
** Purpose : Gets a list of all ProjectPhases and info
** Created By :	Ruan
** Created On :	10 Oct 2020
*/
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT 
		PPH.ProjectId,
		PPH.PhaseId
	FROM 
		tblProjectPhase PPH		
END
GO
PRINT N'Creating [dbo].[spProjectC1]...';


GO
CREATE PROCEDURE [dbo].[spProjectC1]
/*
** Purpose : Adds a new project to the project table
** Created By :	Ruan
** Created On :	15 Oct 2020
*/
@ProjectName VARCHAR(50),
@ProjectPhase VARCHAR(50),
@ProjectStatus VARCHAR(50)

AS
BEGIN
	INSERT INTO dbo.tblProject
	(
	    ProjectName,
	    ProjectPhase,
	    ProjectStatus
	)
	VALUES
	(   
		@ProjectName,
	    @ProjectPhase, 
	    @ProjectStatus
	)
END
GO
PRINT N'Creating [dbo].[spPhaseR1]...';


GO
CREATE PROCEDURE [dbo].[spPhaseR1]
/*
** Purpose : Gets a list of all Phases and info
** Created By :	Ruan
** Created On :	17 Oct 2020
*/
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT 
		PH.PhaseId,
		PH.PhaseName
	FROM 
		tblPhase PH	
END
GO
PRINT N'Creating [dbo].[spPhaseC1]...';


GO
CREATE PROCEDURE [dbo].[spPhaseC1]
/*
** Purpose : Adds a new phase to the phase table
** Created By :	Rockz
** Created On :	22 Nov 2020
*/
@PhaseName VARCHAR(50)

AS
BEGIN
	INSERT INTO dbo.tblPhase
	(
	    PhaseName
	)
	VALUES
	(   
		@PhaseName
	)
END
GO
PRINT N'Creating [dbo].[spTaskR2]...';


GO
CREATE PROCEDURE [dbo].[spTaskR2]
/*
** Purpose : Gets a task by task id
** Created By :	Ruan
** Created On :	22 Nov 2020
*/
@TaskId INT
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT
		T.TaskId,
		T.TaskName,
		T.TaskDescription,
		T.TaskProgress,
		T.TaskAssignedTo,
		T.ProjectName,
		T.UserId,
		T.ProjectId,
		T.TaskStatus
	FROM 
		tblTask T
	WHERE 
		T.TaskId = @TaskId
END
GO
PRINT N'Creating [dbo].[spUserD2]...';


GO
CREATE PROCEDURE [dbo].[spUserD2]
/*
** Purpose :	Delete an existing user
** Created By :	Rockz
** Created On :	28 Oct 2020
*/

	@UserId int
AS
BEGIN

DELETE 
	FROM
		tblUser	
	WHERE 
		UserId = @UserId
END
GO
PRINT N'Creating [dbo].[spUserU2]...';


GO
CREATE PROCEDURE [dbo].[spUserU2]
	/*
** Purpose :	Updates a user
** Created By :	Ruan
** Created On :	22 Nov 2020
*/
	@UserId INT,
	@UserName VARCHAR(50),
	@UserPassword VARCHAR(50), 
	@FirstName VARCHAR(50), 
	@SurName VARCHAR(50), 
	@Email VARCHAR(50), 
	@Initiation BIT, 
	@Planning BIT,
	@Execution BIT,
	@CloseOut BIT
AS
BEGIN

UPDATE tblUser
	SET
		UserName = @UserName,
		UserPassword = @UserPassword,
		FirstName = @FirstName,
		SurName = @SurName, 
		Email = @Email,
		Initiation = @Initiation,
		Planning  = @Planning, 
		Execution = @Execution,
		CloseOut = @CloseOut
	WHERE 
		UserId = @UserId
END
GO
PRINT N'Creating [dbo].[spUserC2]...';


GO
CREATE PROCEDURE [dbo].[spUserC2]
/*
** Purpose : Adds a new user
** Created By :	Ruan
** Created On :	22 Nov 2020
*/
@UserName VARCHAR(50),
@UserPassword VARCHAR(50), 
@FirstName VARCHAR(50), 
@SurName VARCHAR(50), 
@Email VARCHAR(50), 
@Initiation BIT, 
@Planning BIT,
@Execution BIT,
@CloseOut BIT

AS
BEGIN
	INSERT INTO dbo.tblUser
	(
	    UserName,
		UserPassword, 
		FirstName, 
		SurName, 
		Email, 
		Initiation, 
		Planning,
		Execution,
		CloseOut
	)
	VALUES
	(   
		@UserName,
		@UserPassword, 
		@FirstName, 
		@SurName, 
		@Email, 
		@Initiation, 
		@Planning,
		@Execution,
		@CloseOut
	)
END
GO
PRINT N'Creating [dbo].[spUserR2]...';


GO
CREATE PROCEDURE [dbo].[spUserR2]
/*
** Purpose : Gets a list of all Users and info
** Created By :	Ruan
** Created On :	10 Oct 2020
*/

AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT 
		U.UserId,
		U.UserName,
		U.UserPassword,	
		U.FirstName,
		U.SurName,
		U.Email,
		U.Initiation,
		U.Planning,
		U.Execution,
		U.CloseOut
	FROM 
		tblUser U  			
END
GO
PRINT N'Creating [dbo].[spTaskU2]...';


GO
CREATE PROCEDURE [dbo].[spTaskU2]
	/*
** Purpose :	Updates a task
** Created By :	Ruan
** Created On :	22 Nov 2020
*/
	@TaskId INT,
	@TaskName VARCHAR(50),
	@TaskDescription VARCHAR(50), 
	@TaskProgress VARCHAR(50), 
	@TaskAssignedTo VARCHAR(50), 
	@ProjectName VARCHAR(50), 
	@UserId INT, 
	@ProjectId INT, 
	@TaskStatus VARCHAR(50)
AS
BEGIN

UPDATE tblTask
	SET
		TaskName = @TaskName,
		TaskDescription = @TaskDescription,
		TaskProgress = @TaskProgress,
		TaskAssignedTo = @TaskAssignedTo, 
		ProjectName = @ProjectName,
		UserId = @UserId,
		ProjectId  = @ProjectId, 
		TaskStatus = @TaskStatus
	WHERE 
		TaskId = @TaskId
END
GO
PRINT N'Creating [dbo].[spTaskU1]...';


GO
CREATE PROCEDURE [dbo].[spTaskU1]
	/*
** Purpose :	Updates a tasks status when moved
** Created By :	Ruan
** Created On :	22 Nov 2020
*/
	@TaskId INT,
	@TaskStatus VARCHAR(50)
AS
BEGIN

UPDATE tblTask
	SET
		TaskStatus = @TaskStatus
	WHERE 
		TaskId = @TaskId
END
GO
PRINT N'Creating [dbo].[spProjectR2]...';


GO
CREATE PROCEDURE [dbo].[spProjectR2]
/*
** Purpose : Gets list of all logged in users projects and tasks based on phase user belongs to
** Created By :	Ruan
** Created On :	18 Oct 2020
*/
@CurrentUser VARCHAR(50),
@Initiation Bit = 0,
@Planning Bit = 0,
@Execution Bit = 0,
@CloseOut Bit = 0

AS

BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
	SELECT 
		P.ProjectId,
		P.ProjectName,
		P.ProjectPhase,
		P.ProjectStatus,
		P.DocumentLocation,
		T.TaskId,
		T.TaskName,
		T.TaskDescription,
		T.TaskProgress,
		T.TaskAssignedTo,  
		T.TaskStatus,
		U.UserId,
		U.UserName
	INTO #FilterByUser
	FROM 
		tblTask T
		INNER JOIN tblUser U ON T.UserId = U.UserId
		INNER JOIN tblProject P ON T.ProjectId = P.ProjectId
	WHERE 
			(@CurrentUser IS NULL OR T.TaskAssignedTo  = @CurrentUser)

		
	SELECT * FROM #FilterByUser
	WHERE 
		ProjectPhase LIKE 
		 CASE 
			WHEN @Initiation = 1 THEN 
			'Initiation'			
			END
		OR ProjectPhase LIKE 
		 CASE 			
			WHEN @Planning = 1 THEN 
			'Planning'			
			END
		OR ProjectPhase LIKE 
		 CASE 
			WHEN @Execution = 1 THEN 
			'Execution'
			END
		OR ProjectPhase LIKE 
		 CASE 
			WHEN @CloseOut = 1 THEN 
			'CloseOUt'
			END			
END
GO
PRINT N'Creating [dbo].[spAdminC1]...';


GO
CREATE PROCEDURE [dbo].[spAdminC1]
/*
** Purpose : Adds a new admin to the admin table
** Created By :	Ruan
** Created On :	7 Oct 2020
*/
@AdminName VARCHAR(50),
@AdminPassword VARCHAR(50),
@AdminFirstName VARCHAR(50),
@AdminSurName VARCHAR(50),
@AdminEmail VARCHAR(50)

AS
BEGIN
	INSERT INTO dbo.tblAdmin
	(
	    AdminName,
	    AdminPassword,
	    AdminFirstName,
	    AdminSurName,
	    AdminEmail
	)
	VALUES
	(   
		@AdminName,
	    @AdminPassword, 
	    @AdminFirstName, 
	    @AdminSurName, 
	    @AdminEmail   
	)
END
GO
PRINT N'Creating [dbo].[spAdminR1]...';


GO
CREATE PROCEDURE [dbo].[spAdminR1]
/*
** Purpose : Gets a list of all Admins and info
** Created By :	Ruan
** Created On :	10 Oct 2020
*/
@AdminName VARCHAR(50)
AS
BEGIN
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT 
		A.AdminId,
		A.AdminName,
		A.AdminPassword,	
		A.AdminFirstName,
		A.AdminSurName,
		A.AdminEmail
	FROM 
		tblAdmin A  
	WHERE A.AdminName = @AdminName			
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ca778909-6bd7-4900-8f5b-c2fd7d7feef6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ca778909-6bd7-4900-8f5b-c2fd7d7feef6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b182e280-eb21-4d8a-b975-bc82a20cdac8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b182e280-eb21-4d8a-b975-bc82a20cdac8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c59e3c11-00c0-400f-b667-f101659dcee6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c59e3c11-00c0-400f-b667-f101659dcee6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9616d79d-2766-41ca-9c1c-d8fb4ba20f5d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9616d79d-2766-41ca-9c1c-d8fb4ba20f5d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4846f0b1-26a6-4861-b1b0-be7ccd186bc1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4846f0b1-26a6-4861-b1b0-be7ccd186bc1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2e7e8b4e-9369-43fe-819f-f2afc5fee0f0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2e7e8b4e-9369-43fe-819f-f2afc5fee0f0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7e3ecc77-c4a4-495e-9f8f-5b160d77c60c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7e3ecc77-c4a4-495e-9f8f-5b160d77c60c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '56107c50-6c1f-4652-84d4-f65a732b6852')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('56107c50-6c1f-4652-84d4-f65a732b6852')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0dbda28e-3a12-4709-86a0-bc17abec4567')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0dbda28e-3a12-4709-86a0-bc17abec4567')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '32e38279-2bd1-4104-864f-18a6a121bc4e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('32e38279-2bd1-4104-864f-18a6a121bc4e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '98c1a67e-eba9-4693-afe6-4cb609fc36da')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('98c1a67e-eba9-4693-afe6-4cb609fc36da')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '18535b86-1585-4b81-81d0-1574920af1df')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('18535b86-1585-4b81-81d0-1574920af1df')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'aa1fbfc3-ee75-43ae-b56a-86365b509b91')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('aa1fbfc3-ee75-43ae-b56a-86365b509b91')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bb783f73-995c-402d-a826-543d8cc6b7c3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bb783f73-995c-402d-a826-543d8cc6b7c3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '52a27231-1206-4b2c-8df5-5d7a75099e00')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('52a27231-1206-4b2c-8df5-5d7a75099e00')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8dc60ffe-4304-49d0-84a3-700ff5a40661')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8dc60ffe-4304-49d0-84a3-700ff5a40661')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e5f8d39a-c1ee-483a-96a3-ceba65183568')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e5f8d39a-c1ee-483a-96a3-ceba65183568')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '75ff9bfd-6330-4f77-b470-6613521a1f1b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('75ff9bfd-6330-4f77-b470-6613521a1f1b')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
